import{_ as e,c as a,o as n,ag as t}from"./chunks/framework.S-Qvb3wi.js";const b=JSON.parse('{"title":"Test Suite Documentation","description":"","frontmatter":{},"headers":[],"relativePath":"TEST_DOCUMENTATION.md","filePath":"TEST_DOCUMENTATION.md"}'),r={name:"TEST_DOCUMENTATION.md"};function l(o,s,i,p,c,d){return n(),a("div",null,s[0]||(s[0]=[t(`<h1 id="test-suite-documentation" tabindex="-1">Test Suite Documentation <a class="header-anchor" href="#test-suite-documentation" aria-label="Permalink to &quot;Test Suite Documentation&quot;">​</a></h1><h2 id="overview" tabindex="-1">Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;Overview&quot;">​</a></h2><p>This document provides comprehensive information about the test suite for the Response Handler library. The test suite ensures reliability, correctness, and maintainability of all modules.</p><h2 id="test-structure" tabindex="-1">Test Structure <a class="header-anchor" href="#test-structure" aria-label="Permalink to &quot;Test Structure&quot;">​</a></h2><div class="language- line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span>src/</span></span>
<span class="line"><span>├── __tests__/</span></span>
<span class="line"><span>│   └── helpers/</span></span>
<span class="line"><span>│       └── mocks.ts              # Mock utilities and test helpers</span></span>
<span class="line"><span>├── responseTemplate.test.ts      # Response template engine tests</span></span>
<span class="line"><span>├── rest/</span></span>
<span class="line"><span>│   ├── response.test.ts         # REST response handlers tests</span></span>
<span class="line"><span>│   └── errorHandler.test.ts     # Express error middleware tests</span></span>
<span class="line"><span>├── socket/</span></span>
<span class="line"><span>│   ├── emitter.test.ts          # Socket.IO emitters tests</span></span>
<span class="line"><span>│   └── wrapper.test.ts          # Socket error wrapper tests</span></span>
<span class="line"><span>├── utils/</span></span>
<span class="line"><span>│   └── formatter.test.ts        # Response formatter tests</span></span>
<span class="line"><span>└── index.test.ts                # Integration and exports tests</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="test-configuration" tabindex="-1">Test Configuration <a class="header-anchor" href="#test-configuration" aria-label="Permalink to &quot;Test Configuration&quot;">​</a></h2><h3 id="jest-configuration-jest-config-js" tabindex="-1">Jest Configuration (<code>jest.config.js</code>) <a class="header-anchor" href="#jest-configuration-jest-config-js" aria-label="Permalink to &quot;Jest Configuration (\`jest.config.js\`)&quot;">​</a></h3><div class="language-javascript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#79B8FF;">module</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">exports</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  preset: </span><span style="color:#9ECBFF;">&#39;ts-jest&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  testEnvironment: </span><span style="color:#9ECBFF;">&#39;node&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">  testMatch: [</span><span style="color:#9ECBFF;">&#39;**/*.test.ts&#39;</span><span style="color:#E1E4E8;">],</span></span>
<span class="line"><span style="color:#E1E4E8;">  rootDir: </span><span style="color:#9ECBFF;">&#39;./src&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="test-scripts" tabindex="-1">Test Scripts <a class="header-anchor" href="#test-scripts" aria-label="Permalink to &quot;Test Scripts&quot;">​</a></h3><ul><li><code>npm test</code> - Run all tests</li><li><code>npm run test:watch</code> - Run tests in watch mode (if configured)</li><li><code>npm run test:coverage</code> - Run tests with coverage report (if configured)</li></ul><h2 id="test-coverage" tabindex="-1">Test Coverage <a class="header-anchor" href="#test-coverage" aria-label="Permalink to &quot;Test Coverage&quot;">​</a></h2><h3 id="module-coverage-summary" tabindex="-1">Module Coverage Summary <a class="header-anchor" href="#module-coverage-summary" aria-label="Permalink to &quot;Module Coverage Summary&quot;">​</a></h3><table tabindex="0"><thead><tr><th>Module</th><th>Tests</th><th>Coverage Focus</th></tr></thead><tbody><tr><td><code>responseTemplate.test.ts</code></td><td>15 tests</td><td>Template configuration, response formatting</td></tr><tr><td><code>rest/response.test.ts</code></td><td>31 tests</td><td>Success/error responses, status codes, data handling</td></tr><tr><td><code>rest/errorHandler.test.ts</code></td><td>15 tests</td><td>Error middleware, error forwarding, integration</td></tr><tr><td><code>socket/emitter.test.ts</code></td><td>34 tests</td><td>Event emission, room targeting, error handling</td></tr><tr><td><code>socket/wrapper.test.ts</code></td><td>35 tests</td><td>Error wrapping, async operations, edge cases</td></tr><tr><td><code>utils/formatter.test.ts</code></td><td>12 tests</td><td>Format delegation, parameter handling</td></tr><tr><td><code>index.test.ts</code></td><td>5 tests</td><td>Module exports, API surface, integration</td></tr></tbody></table><p><strong>Total: 147 tests</strong></p><h2 id="test-categories" tabindex="-1">Test Categories <a class="header-anchor" href="#test-categories" aria-label="Permalink to &quot;Test Categories&quot;">​</a></h2><h3 id="_1-unit-tests" tabindex="-1">1. Unit Tests <a class="header-anchor" href="#_1-unit-tests" aria-label="Permalink to &quot;1. Unit Tests&quot;">​</a></h3><ul><li><strong>Purpose</strong>: Test individual functions in isolation</li><li><strong>Coverage</strong>: All public and internal functions</li><li><strong>Mocking</strong>: External dependencies are mocked</li></ul><h3 id="_2-integration-tests" tabindex="-1">2. Integration Tests <a class="header-anchor" href="#_2-integration-tests" aria-label="Permalink to &quot;2. Integration Tests&quot;">​</a></h3><ul><li><strong>Purpose</strong>: Test module interactions and exports</li><li><strong>Coverage</strong>: Cross-module functionality</li><li><strong>Focus</strong>: API consistency and module boundaries</li></ul><h3 id="_3-edge-case-tests" tabindex="-1">3. Edge Case Tests <a class="header-anchor" href="#_3-edge-case-tests" aria-label="Permalink to &quot;3. Edge Case Tests&quot;">​</a></h3><ul><li><strong>Purpose</strong>: Test boundary conditions and error scenarios</li><li><strong>Coverage</strong>: Null/undefined handling, type edge cases</li><li><strong>Examples</strong>: Empty data, circular references, async errors</li></ul><h2 id="test-helpers-and-utilities" tabindex="-1">Test Helpers and Utilities <a class="header-anchor" href="#test-helpers-and-utilities" aria-label="Permalink to &quot;Test Helpers and Utilities&quot;">​</a></h2><h3 id="mock-utilities-src-tests-helpers-mocks-ts" tabindex="-1">Mock Utilities (<code>src/__tests__/helpers/mocks.ts</code>) <a class="header-anchor" href="#mock-utilities-src-tests-helpers-mocks-ts" aria-label="Permalink to &quot;Mock Utilities (\`src/__tests__/helpers/mocks.ts\`)&quot;">​</a></h3><h4 id="express-mocks" tabindex="-1">Express Mocks <a class="header-anchor" href="#express-mocks" aria-label="Permalink to &quot;Express Mocks&quot;">​</a></h4><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#B392F0;">createMockResponse</span><span style="color:#E1E4E8;">(): Partial</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Response</span><span style="color:#F97583;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>Creates mock Express response object</li><li>Includes <code>status()</code> and <code>json()</code> methods</li><li>Returns chainable mock for testing</li></ul><h4 id="socket-io-mocks" tabindex="-1">Socket.IO Mocks <a class="header-anchor" href="#socket-io-mocks" aria-label="Permalink to &quot;Socket.IO Mocks&quot;">​</a></h4><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#B392F0;">createMockSocket</span><span style="color:#E1E4E8;">(): Partial</span><span style="color:#F97583;">&lt;</span><span style="color:#E1E4E8;">Socket</span><span style="color:#F97583;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>Creates mock Socket.IO socket object</li><li>Includes <code>emit()</code> and <code>to()</code> methods</li><li>Supports room and direct socket targeting</li></ul><h4 id="test-data" tabindex="-1">Test Data <a class="header-anchor" href="#test-data" aria-label="Permalink to &quot;Test Data&quot;">​</a></h4><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#B392F0;">sampleUserData</span><span style="color:#E1E4E8;">: { </span><span style="color:#B392F0;">id</span><span style="color:#E1E4E8;">: string, </span><span style="color:#B392F0;">name</span><span style="color:#E1E4E8;">: string, </span><span style="color:#B392F0;">email</span><span style="color:#E1E4E8;">: string }</span></span>
<span class="line"><span style="color:#B392F0;">sampleErrorData</span><span style="color:#E1E4E8;">: { </span><span style="color:#B392F0;">message</span><span style="color:#E1E4E8;">: string, </span><span style="color:#B392F0;">type</span><span style="color:#E1E4E8;">: string, </span><span style="color:#B392F0;">details</span><span style="color:#E1E4E8;">: object }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="error-classes" tabindex="-1">Error Classes <a class="header-anchor" href="#error-classes" aria-label="Permalink to &quot;Error Classes&quot;">​</a></h4><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#B392F0;">MockAppError</span><span style="color:#E1E4E8;">: Custom error </span><span style="color:#F97583;">with</span><span style="color:#E1E4E8;"> statusCode, type, details</span></span>
<span class="line"><span style="color:#B392F0;">MockValidationError</span><span style="color:#E1E4E8;">: Validation</span><span style="color:#F97583;">-</span><span style="color:#E1E4E8;">specific </span><span style="color:#B392F0;">error</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">422</span><span style="color:#E1E4E8;"> status)</span></span>
<span class="line"><span style="color:#B392F0;">MockNotFoundError</span><span style="color:#E1E4E8;">: Not found </span><span style="color:#B392F0;">error</span><span style="color:#E1E4E8;"> (</span><span style="color:#79B8FF;">404</span><span style="color:#E1E4E8;"> status)</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="test-patterns" tabindex="-1">Test Patterns <a class="header-anchor" href="#test-patterns" aria-label="Permalink to &quot;Test Patterns&quot;">​</a></h2><h3 id="_1-arrange-act-assert-aaa" tabindex="-1">1. Arrange-Act-Assert (AAA) <a class="header-anchor" href="#_1-arrange-act-assert-aaa" aria-label="Permalink to &quot;1. Arrange-Act-Assert (AAA)&quot;">​</a></h3><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#B392F0;">it</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;should handle success response&#39;</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">  // Arrange</span></span>
<span class="line"><span style="color:#F97583;">  const</span><span style="color:#79B8FF;"> mockRes</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> createMockResponse</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#F97583;">  const</span><span style="color:#79B8FF;"> data</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> { id: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, name: </span><span style="color:#9ECBFF;">&#39;Test&#39;</span><span style="color:#E1E4E8;"> };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  // Act</span></span>
<span class="line"><span style="color:#B392F0;">  sendSuccess</span><span style="color:#E1E4E8;">(mockRes </span><span style="color:#F97583;">as</span><span style="color:#B392F0;"> Response</span><span style="color:#E1E4E8;">, data, </span><span style="color:#9ECBFF;">&#39;Success message&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">  // Assert</span></span>
<span class="line"><span style="color:#B392F0;">  expect</span><span style="color:#E1E4E8;">(mockRes.status).</span><span style="color:#B392F0;">toHaveBeenCalledWith</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#B392F0;">  expect</span><span style="color:#E1E4E8;">(mockRes.json).</span><span style="color:#B392F0;">toHaveBeenCalledWith</span><span style="color:#E1E4E8;">(expectedPayload);</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="_2-mock-reset-pattern" tabindex="-1">2. Mock Reset Pattern <a class="header-anchor" href="#_2-mock-reset-pattern" aria-label="Permalink to &quot;2. Mock Reset Pattern&quot;">​</a></h3><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#B392F0;">beforeEach</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  jest.</span><span style="color:#B392F0;">clearAllMocks</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">  // Reset mocks to clean state</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h3 id="_3-parameter-validation" tabindex="-1">3. Parameter Validation <a class="header-anchor" href="#_3-parameter-validation" aria-label="Permalink to &quot;3. Parameter Validation&quot;">​</a></h3><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#B392F0;">it</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;should call function with correct parameters&#39;</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#B392F0;">  someFunction</span><span style="color:#E1E4E8;">(param1, param2, param3);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">  expect</span><span style="color:#E1E4E8;">(mockFunction).</span><span style="color:#B392F0;">toHaveBeenCalledWith</span><span style="color:#E1E4E8;">(param1, param2, param3);</span></span>
<span class="line"><span style="color:#B392F0;">  expect</span><span style="color:#E1E4E8;">(mockFunction).</span><span style="color:#B392F0;">toHaveBeenCalledTimes</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h3 id="_4-error-testing" tabindex="-1">4. Error Testing <a class="header-anchor" href="#_4-error-testing" aria-label="Permalink to &quot;4. Error Testing&quot;">​</a></h3><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#B392F0;">it</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;should handle errors correctly&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">  const</span><span style="color:#79B8FF;"> error</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> MockAppError</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Test error&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  mockHandler.</span><span style="color:#B392F0;">mockRejectedValue</span><span style="color:#E1E4E8;">(error);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">  await</span><span style="color:#B392F0;"> wrappedFunction</span><span style="color:#E1E4E8;">(params);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">  expect</span><span style="color:#E1E4E8;">(errorHandler).</span><span style="color:#B392F0;">toHaveBeenCalledWith</span><span style="color:#E1E4E8;">(error);</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="module-specific-test-details" tabindex="-1">Module-Specific Test Details <a class="header-anchor" href="#module-specific-test-details" aria-label="Permalink to &quot;Module-Specific Test Details&quot;">​</a></h2><h3 id="response-template-tests-responsetemplate-test-ts" tabindex="-1">Response Template Tests (<code>responseTemplate.test.ts</code>) <a class="header-anchor" href="#response-template-tests-responsetemplate-test-ts" aria-label="Permalink to &quot;Response Template Tests (\`responseTemplate.test.ts\`)&quot;">​</a></h3><ul><li><strong>Custom template configuration</strong>: Tests template function validation</li><li><strong>Default behavior</strong>: Verifies default response structure</li><li><strong>Template persistence</strong>: Ensures template survives multiple calls</li><li><strong>Complex templates</strong>: Tests conditional logic in templates</li></ul><h3 id="rest-response-tests-rest-response-test-ts" tabindex="-1">REST Response Tests (<code>rest/response.test.ts</code>) <a class="header-anchor" href="#rest-response-tests-rest-response-test-ts" aria-label="Permalink to &quot;REST Response Tests (\`rest/response.test.ts\`)&quot;">​</a></h3><ul><li><strong>Success responses</strong>: Various data types and messages</li><li><strong>Error responses</strong>: Different error types and status codes</li><li><strong>Parameter validation</strong>: Default values and edge cases</li><li><strong>Integration</strong>: Interaction with formatter utility</li></ul><h3 id="error-handler-tests-rest-errorhandler-test-ts" tabindex="-1">Error Handler Tests (<code>rest/errorHandler.test.ts</code>) <a class="header-anchor" href="#error-handler-tests-rest-errorhandler-test-ts" aria-label="Permalink to &quot;Error Handler Tests (\`rest/errorHandler.test.ts\`)&quot;">​</a></h3><ul><li><strong>Error forwarding</strong>: Passes errors to sendError correctly</li><li><strong>Express integration</strong>: Works with Express middleware pattern</li><li><strong>Error preservation</strong>: Maintains all error properties</li><li><strong>Context handling</strong>: Works with different request contexts</li></ul><h3 id="socket-emitter-tests-socket-emitter-test-ts" tabindex="-1">Socket Emitter Tests (<code>socket/emitter.test.ts</code>) <a class="header-anchor" href="#socket-emitter-tests-socket-emitter-test-ts" aria-label="Permalink to &quot;Socket Emitter Tests (\`socket/emitter.test.ts\`)&quot;">​</a></h3><ul><li><strong>Event emission</strong>: Basic emit functionality</li><li><strong>Room targeting</strong>: Emit to specific rooms</li><li><strong>Socket targeting</strong>: Emit to specific socket IDs</li><li><strong>Data handling</strong>: Complex data structures and types</li><li><strong>Error emission</strong>: Error event handling</li></ul><h3 id="socket-wrapper-tests-socket-wrapper-test-ts" tabindex="-1">Socket Wrapper Tests (<code>socket/wrapper.test.ts</code>) <a class="header-anchor" href="#socket-wrapper-tests-socket-wrapper-test-ts" aria-label="Permalink to &quot;Socket Wrapper Tests (\`socket/wrapper.test.ts\`)&quot;">​</a></h3><ul><li><strong>Error catching</strong>: Sync and async error handling</li><li><strong>Event resolution</strong>: Event name from data or default</li><li><strong>Handler execution</strong>: Proper parameter forwarding</li><li><strong>Edge cases</strong>: Null data, undefined events, nested async</li><li><strong>Concurrency</strong>: Multiple handlers running simultaneously</li></ul><h3 id="utils-formatter-tests-utils-formatter-test-ts" tabindex="-1">Utils Formatter Tests (<code>utils/formatter.test.ts</code>) <a class="header-anchor" href="#utils-formatter-tests-utils-formatter-test-ts" aria-label="Permalink to &quot;Utils Formatter Tests (\`utils/formatter.test.ts\`)&quot;">​</a></h3><ul><li><strong>Parameter forwarding</strong>: Correct delegation to template engine</li><li><strong>Default values</strong>: Parameter default handling</li><li><strong>Type preservation</strong>: Various data types maintained</li><li><strong>Integration</strong>: Works with response template system</li></ul><h3 id="integration-tests-index-test-ts" tabindex="-1">Integration Tests (<code>index.test.ts</code>) <a class="header-anchor" href="#integration-tests-index-test-ts" aria-label="Permalink to &quot;Integration Tests (\`index.test.ts\`)&quot;">​</a></h3><ul><li><strong>Export verification</strong>: All functions properly exported</li><li><strong>API stability</strong>: Consistent public interface</li><li><strong>Module boundaries</strong>: Separation between REST and Socket</li><li><strong>Import patterns</strong>: CommonJS and ES6 compatibility</li></ul><h2 id="running-tests" tabindex="-1">Running Tests <a class="header-anchor" href="#running-tests" aria-label="Permalink to &quot;Running Tests&quot;">​</a></h2><h3 id="basic-test-run" tabindex="-1">Basic Test Run <a class="header-anchor" href="#basic-test-run" aria-label="Permalink to &quot;Basic Test Run&quot;">​</a></h3><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#B392F0;">npm</span><span style="color:#9ECBFF;"> test</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="watch-mode-if-configured" tabindex="-1">Watch Mode (if configured) <a class="header-anchor" href="#watch-mode-if-configured" aria-label="Permalink to &quot;Watch Mode (if configured)&quot;">​</a></h3><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#B392F0;">npm</span><span style="color:#9ECBFF;"> run</span><span style="color:#9ECBFF;"> test:watch</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="coverage-report-if-configured" tabindex="-1">Coverage Report (if configured) <a class="header-anchor" href="#coverage-report-if-configured" aria-label="Permalink to &quot;Coverage Report (if configured)&quot;">​</a></h3><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#B392F0;">npm</span><span style="color:#9ECBFF;"> run</span><span style="color:#9ECBFF;"> test:coverage</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="specific-test-file" tabindex="-1">Specific Test File <a class="header-anchor" href="#specific-test-file" aria-label="Permalink to &quot;Specific Test File&quot;">​</a></h3><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#B392F0;">npx</span><span style="color:#9ECBFF;"> jest</span><span style="color:#9ECBFF;"> responseTemplate.test.ts</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="specific-test-pattern" tabindex="-1">Specific Test Pattern <a class="header-anchor" href="#specific-test-pattern" aria-label="Permalink to &quot;Specific Test Pattern&quot;">​</a></h3><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#B392F0;">npx</span><span style="color:#9ECBFF;"> jest</span><span style="color:#79B8FF;"> --testNamePattern=</span><span style="color:#9ECBFF;">&quot;should handle success&quot;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="test-maintenance" tabindex="-1">Test Maintenance <a class="header-anchor" href="#test-maintenance" aria-label="Permalink to &quot;Test Maintenance&quot;">​</a></h2><h3 id="adding-new-tests" tabindex="-1">Adding New Tests <a class="header-anchor" href="#adding-new-tests" aria-label="Permalink to &quot;Adding New Tests&quot;">​</a></h3><ol><li>Follow existing naming conventions</li><li>Use appropriate test helpers from <code>mocks.ts</code></li><li>Include edge cases and error scenarios</li><li>Update this documentation if adding new patterns</li></ol><h3 id="updating-tests" tabindex="-1">Updating Tests <a class="header-anchor" href="#updating-tests" aria-label="Permalink to &quot;Updating Tests&quot;">​</a></h3><ol><li>Maintain backward compatibility in test helpers</li><li>Update related tests when changing functionality</li><li>Ensure mocks match actual implementation signatures</li></ol><h3 id="debugging-tests" tabindex="-1">Debugging Tests <a class="header-anchor" href="#debugging-tests" aria-label="Permalink to &quot;Debugging Tests&quot;">​</a></h3><ol><li>Use <code>console.log</code> in tests for debugging</li><li>Run specific test files to isolate issues</li><li>Check mock call counts and parameters</li><li>Verify async test completion with proper awaits</li></ol><h2 id="best-practices" tabindex="-1">Best Practices <a class="header-anchor" href="#best-practices" aria-label="Permalink to &quot;Best Practices&quot;">​</a></h2><h3 id="_1-test-independence" tabindex="-1">1. Test Independence <a class="header-anchor" href="#_1-test-independence" aria-label="Permalink to &quot;1. Test Independence&quot;">​</a></h3><ul><li>Each test should be independent</li><li>Use <code>beforeEach</code> to reset state</li><li>Don&#39;t rely on test execution order</li></ul><h3 id="_2-descriptive-test-names" tabindex="-1">2. Descriptive Test Names <a class="header-anchor" href="#_2-descriptive-test-names" aria-label="Permalink to &quot;2. Descriptive Test Names&quot;">​</a></h3><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// Good</span></span>
<span class="line"><span style="color:#B392F0;">it</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;should emit error event when handler throws synchronous error&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Bad</span></span>
<span class="line"><span style="color:#B392F0;">it</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;should handle errors&#39;</span><span style="color:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="_3-mock-management" tabindex="-1">3. Mock Management <a class="header-anchor" href="#_3-mock-management" aria-label="Permalink to &quot;3. Mock Management&quot;">​</a></h3><ul><li>Reset mocks between tests</li><li>Verify mock calls and parameters</li><li>Use specific mocks for specific scenarios</li></ul><h3 id="_4-async-testing" tabindex="-1">4. Async Testing <a class="header-anchor" href="#_4-async-testing" aria-label="Permalink to &quot;4. Async Testing&quot;">​</a></h3><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// Proper async test handling</span></span>
<span class="line"><span style="color:#B392F0;">it</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;should handle async operations&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">  await</span><span style="color:#B392F0;"> asyncFunction</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#B392F0;">  expect</span><span style="color:#E1E4E8;">(result).</span><span style="color:#B392F0;">toBe</span><span style="color:#E1E4E8;">(expected);</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h3 id="_5-error-testing" tabindex="-1">5. Error Testing <a class="header-anchor" href="#_5-error-testing" aria-label="Permalink to &quot;5. Error Testing&quot;">​</a></h3><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// Test both success and failure paths</span></span>
<span class="line"><span style="color:#B392F0;">it</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;should handle successful operation&#39;</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">  /* test */</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"><span style="color:#B392F0;">it</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;should handle operation failure&#39;</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">  /* test */</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="continuous-integration" tabindex="-1">Continuous Integration <a class="header-anchor" href="#continuous-integration" aria-label="Permalink to &quot;Continuous Integration&quot;">​</a></h2><p>The test suite is designed to run in CI/CD environments:</p><ul><li>No external dependencies required</li><li>All tests use mocks and stubs</li><li>Fast execution (typically under 5 seconds)</li><li>Clear failure reporting</li></ul><h2 id="future-enhancements" tabindex="-1">Future Enhancements <a class="header-anchor" href="#future-enhancements" aria-label="Permalink to &quot;Future Enhancements&quot;">​</a></h2><h3 id="potential-additions" tabindex="-1">Potential Additions <a class="header-anchor" href="#potential-additions" aria-label="Permalink to &quot;Potential Additions&quot;">​</a></h3><ol><li><strong>Performance tests</strong>: Measure response times</li><li><strong>Load tests</strong>: Test with high volumes</li><li><strong>Property-based tests</strong>: Generate random test data</li><li><strong>Visual regression tests</strong>: For documentation examples</li><li><strong>Contract tests</strong>: API compatibility validation</li></ol><h3 id="coverage-goals" tabindex="-1">Coverage Goals <a class="header-anchor" href="#coverage-goals" aria-label="Permalink to &quot;Coverage Goals&quot;">​</a></h3><ul><li>Maintain 100% function coverage</li><li>Increase branch coverage for complex conditionals</li><li>Add mutation testing for robust test validation</li></ul><h2 id="troubleshooting" tabindex="-1">Troubleshooting <a class="header-anchor" href="#troubleshooting" aria-label="Permalink to &quot;Troubleshooting&quot;">​</a></h2><h3 id="common-issues" tabindex="-1">Common Issues <a class="header-anchor" href="#common-issues" aria-label="Permalink to &quot;Common Issues&quot;">​</a></h3><ol><li><strong>Mock not being called</strong>: Check function signatures and parameter matching</li><li><strong>Async test failures</strong>: Ensure proper <code>await</code> usage</li><li><strong>Type errors</strong>: Update mocks to match TypeScript interfaces</li><li><strong>Intermittent failures</strong>: Check for shared state between tests</li></ol><h3 id="debug-commands" tabindex="-1">Debug Commands <a class="header-anchor" href="#debug-commands" aria-label="Permalink to &quot;Debug Commands&quot;">​</a></h3><div class="language-bash line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;"># Run with verbose output</span></span>
<span class="line"><span style="color:#B392F0;">npx</span><span style="color:#9ECBFF;"> jest</span><span style="color:#79B8FF;"> --verbose</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># Run specific test with debugging</span></span>
<span class="line"><span style="color:#B392F0;">npx</span><span style="color:#9ECBFF;"> jest</span><span style="color:#79B8FF;"> --testNamePattern=</span><span style="color:#9ECBFF;">&quot;specific test&quot;</span><span style="color:#79B8FF;"> --verbose</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;"># Check test coverage</span></span>
<span class="line"><span style="color:#B392F0;">npx</span><span style="color:#9ECBFF;"> jest</span><span style="color:#79B8FF;"> --coverage</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>This comprehensive test suite ensures the Response Handler library maintains high quality and reliability across all supported use cases.</p>`,100)]))}const h=e(r,[["render",l]]);export{b as __pageData,h as default};
