import{_ as n,c as a,o as e,ag as p}from"./chunks/framework.S-Qvb3wi.js";const b=JSON.parse('{"title":"Socket.IO API Reference","description":"","frontmatter":{},"headers":[],"relativePath":"api/socket.md","filePath":"api/socket.md"}'),l={name:"api/socket.md"};function o(r,s,c,t,E,i){return e(),a("div",null,s[0]||(s[0]=[p(`<h1 id="socket-io-api-reference" tabindex="-1">Socket.IO API Reference <a class="header-anchor" href="#socket-io-api-reference" aria-label="Permalink to &quot;Socket.IO API Reference&quot;">​</a></h1><p>Complete API reference for Socket.IO integration.</p><h2 id="quick-setup" tabindex="-1">Quick Setup <a class="header-anchor" href="#quick-setup" aria-label="Permalink to &quot;Quick Setup&quot;">​</a></h2><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { Server } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;socket.io&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { quickSocketSetup } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;@amitkandar/response-handler&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#79B8FF;"> io</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> Server</span><span style="color:#E1E4E8;">(server);</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">enhance</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">wrapper</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> quickSocketSetup</span><span style="color:#E1E4E8;">(config);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="enhancement-methods" tabindex="-1">Enhancement Methods <a class="header-anchor" href="#enhancement-methods" aria-label="Permalink to &quot;Enhancement Methods&quot;">​</a></h2><h3 id="enhance-socket-event" tabindex="-1"><code>enhance(socket, event)</code> <a class="header-anchor" href="#enhance-socket-event" aria-label="Permalink to &quot;\`enhance(socket, event)\`&quot;">​</a></h3><p>Manually enhance a socket response for a specific event:</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">socket.</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;get-user&#39;</span><span style="color:#E1E4E8;">, (</span><span style="color:#FFAB70;">data</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">  const</span><span style="color:#79B8FF;"> response</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> enhance</span><span style="color:#E1E4E8;">(socket, </span><span style="color:#9ECBFF;">&#39;user-data&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">  if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">data.userId) {</span></span>
<span class="line"><span style="color:#F97583;">    return</span><span style="color:#E1E4E8;"> response.</span><span style="color:#B392F0;">badRequest</span><span style="color:#E1E4E8;">({ field: </span><span style="color:#9ECBFF;">&#39;userId&#39;</span><span style="color:#E1E4E8;"> }, </span><span style="color:#9ECBFF;">&#39;User ID required&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">  const</span><span style="color:#79B8FF;"> user</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> getUserById</span><span style="color:#E1E4E8;">(data.userId);</span></span>
<span class="line"><span style="color:#E1E4E8;">  response.</span><span style="color:#B392F0;">ok</span><span style="color:#E1E4E8;">(user, </span><span style="color:#9ECBFF;">&#39;User retrieved successfully&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="wrapper-handler" tabindex="-1"><code>wrapper(handler)</code> <a class="header-anchor" href="#wrapper-handler" aria-label="Permalink to &quot;\`wrapper(handler)\`&quot;">​</a></h3><p>Automatically wrap handlers with error handling and response enhancement:</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">socket.</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#9ECBFF;">  &#39;create-post&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#B392F0;">  wrapper</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">socket</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">response</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">data</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">    // Automatic error handling</span></span>
<span class="line"><span style="color:#6A737D;">    // Response object is automatically provided</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">    if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">data.title) {</span></span>
<span class="line"><span style="color:#F97583;">      return</span><span style="color:#E1E4E8;"> response.</span><span style="color:#B392F0;">badRequest</span><span style="color:#E1E4E8;">({ field: </span><span style="color:#9ECBFF;">&#39;title&#39;</span><span style="color:#E1E4E8;"> }, </span><span style="color:#9ECBFF;">&#39;Title required&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">    const</span><span style="color:#79B8FF;"> post</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> await</span><span style="color:#B392F0;"> createPost</span><span style="color:#E1E4E8;">(data);</span></span>
<span class="line"><span style="color:#E1E4E8;">    response.</span><span style="color:#B392F0;">created</span><span style="color:#E1E4E8;">(post, </span><span style="color:#9ECBFF;">&#39;Post created successfully&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }),</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="enhanced-response-methods" tabindex="-1">Enhanced Response Methods <a class="header-anchor" href="#enhanced-response-methods" aria-label="Permalink to &quot;Enhanced Response Methods&quot;">​</a></h2><p>All methods are available on the enhanced response object:</p><h3 id="success-responses" tabindex="-1">Success Responses <a class="header-anchor" href="#success-responses" aria-label="Permalink to &quot;Success Responses&quot;">​</a></h3><h4 id="response-ok-data-message" tabindex="-1"><code>response.ok(data, message)</code> <a class="header-anchor" href="#response-ok-data-message" aria-label="Permalink to &quot;\`response.ok(data, message)\`&quot;">​</a></h4><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">response.</span><span style="color:#B392F0;">ok</span><span style="color:#E1E4E8;">({ user: { id: </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, name: </span><span style="color:#9ECBFF;">&#39;John&#39;</span><span style="color:#E1E4E8;"> } }, </span><span style="color:#9ECBFF;">&#39;User retrieved&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// Emits: { success: true, data: {...}, message: &#39;...&#39; }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="response-created-data-message" tabindex="-1"><code>response.created(data, message)</code> <a class="header-anchor" href="#response-created-data-message" aria-label="Permalink to &quot;\`response.created(data, message)\`&quot;">​</a></h4><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">response.</span><span style="color:#B392F0;">created</span><span style="color:#E1E4E8;">({ id: </span><span style="color:#79B8FF;">123</span><span style="color:#E1E4E8;">, title: </span><span style="color:#9ECBFF;">&#39;New Post&#39;</span><span style="color:#E1E4E8;"> }, </span><span style="color:#9ECBFF;">&#39;Post created&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// Emits: { success: true, data: {...}, message: &#39;...&#39; }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h3 id="error-responses" tabindex="-1">Error Responses <a class="header-anchor" href="#error-responses" aria-label="Permalink to &quot;Error Responses&quot;">​</a></h3><h4 id="response-error-error-code" tabindex="-1"><code>response.error(error, code)</code> <a class="header-anchor" href="#response-error-error-code" aria-label="Permalink to &quot;\`response.error(error, code)\`&quot;">​</a></h4><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">response.</span><span style="color:#B392F0;">error</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> Error</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Something went wrong&#39;</span><span style="color:#E1E4E8;">), </span><span style="color:#9ECBFF;">&#39;SERVER_ERROR&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// Emits: { success: false, error: {...}, message: &#39;...&#39; }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="response-badrequest-error-message" tabindex="-1"><code>response.badRequest(error, message)</code> <a class="header-anchor" href="#response-badrequest-error-message" aria-label="Permalink to &quot;\`response.badRequest(error, message)\`&quot;">​</a></h4><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">response.</span><span style="color:#B392F0;">badRequest</span><span style="color:#E1E4E8;">({ field: </span><span style="color:#9ECBFF;">&#39;email&#39;</span><span style="color:#E1E4E8;"> }, </span><span style="color:#9ECBFF;">&#39;Invalid email format&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">// Emits: { success: false, error: {...}, message: &#39;...&#39; }</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h4 id="response-unauthorized-error-message" tabindex="-1"><code>response.unauthorized(error, message)</code> <a class="header-anchor" href="#response-unauthorized-error-message" aria-label="Permalink to &quot;\`response.unauthorized(error, message)\`&quot;">​</a></h4><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">response.</span><span style="color:#B392F0;">unauthorized</span><span style="color:#E1E4E8;">({ reason: </span><span style="color:#9ECBFF;">&#39;invalid_token&#39;</span><span style="color:#E1E4E8;"> }, </span><span style="color:#9ECBFF;">&#39;Authentication failed&#39;</span><span style="color:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="response-forbidden-error-message" tabindex="-1"><code>response.forbidden(error, message)</code> <a class="header-anchor" href="#response-forbidden-error-message" aria-label="Permalink to &quot;\`response.forbidden(error, message)\`&quot;">​</a></h4><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">response.</span><span style="color:#B392F0;">forbidden</span><span style="color:#E1E4E8;">({ role: </span><span style="color:#9ECBFF;">&#39;user&#39;</span><span style="color:#E1E4E8;"> }, </span><span style="color:#9ECBFF;">&#39;Admin access required&#39;</span><span style="color:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="response-notfound-error-message" tabindex="-1"><code>response.notFound(error, message)</code> <a class="header-anchor" href="#response-notfound-error-message" aria-label="Permalink to &quot;\`response.notFound(error, message)\`&quot;">​</a></h4><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">response.</span><span style="color:#B392F0;">notFound</span><span style="color:#E1E4E8;">({ id: </span><span style="color:#79B8FF;">123</span><span style="color:#E1E4E8;"> }, </span><span style="color:#9ECBFF;">&#39;User not found&#39;</span><span style="color:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="room-and-socket-targeting" tabindex="-1">Room and Socket Targeting <a class="header-anchor" href="#room-and-socket-targeting" aria-label="Permalink to &quot;Room and Socket Targeting&quot;">​</a></h3><h4 id="response-toroom-roomid" tabindex="-1"><code>response.toRoom(roomId)</code> <a class="header-anchor" href="#response-toroom-roomid" aria-label="Permalink to &quot;\`response.toRoom(roomId)\`&quot;">​</a></h4><p>Send response to all sockets in a room:</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">response.</span><span style="color:#B392F0;">toRoom</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;chat-room-1&#39;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">ok</span><span style="color:#E1E4E8;">(message, </span><span style="color:#9ECBFF;">&#39;New message posted&#39;</span><span style="color:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h4 id="response-tosocket-socketid" tabindex="-1"><code>response.toSocket(socketId)</code> <a class="header-anchor" href="#response-tosocket-socketid" aria-label="Permalink to &quot;\`response.toSocket(socketId)\`&quot;">​</a></h4><p>Send response to a specific socket:</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">response.</span><span style="color:#B392F0;">toSocket</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;socket-123&#39;</span><span style="color:#E1E4E8;">).</span><span style="color:#B392F0;">ok</span><span style="color:#E1E4E8;">(notification, </span><span style="color:#9ECBFF;">&#39;Personal notification&#39;</span><span style="color:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="generic-emission" tabindex="-1">Generic Emission <a class="header-anchor" href="#generic-emission" aria-label="Permalink to &quot;Generic Emission&quot;">​</a></h3><h4 id="response-emit-event-data-statuscode" tabindex="-1"><code>response.emit(event, data, statusCode)</code> <a class="header-anchor" href="#response-emit-event-data-statuscode" aria-label="Permalink to &quot;\`response.emit(event, data, statusCode)\`&quot;">​</a></h4><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">response.</span><span style="color:#B392F0;">emit</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;custom-event&#39;</span><span style="color:#E1E4E8;">, { custom: </span><span style="color:#9ECBFF;">&#39;data&#39;</span><span style="color:#E1E4E8;"> }, </span><span style="color:#79B8FF;">200</span><span style="color:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h2 id="socket-enhancement-patterns" tabindex="-1">Socket Enhancement Patterns <a class="header-anchor" href="#socket-enhancement-patterns" aria-label="Permalink to &quot;Socket Enhancement Patterns&quot;">​</a></h2><h3 id="manual-enhancement" tabindex="-1">Manual Enhancement <a class="header-anchor" href="#manual-enhancement" aria-label="Permalink to &quot;Manual Enhancement&quot;">​</a></h3><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">io.</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;connection&#39;</span><span style="color:#E1E4E8;">, (</span><span style="color:#FFAB70;">socket</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  socket.</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;get-data&#39;</span><span style="color:#E1E4E8;">, (</span><span style="color:#FFAB70;">data</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">    const</span><span style="color:#79B8FF;"> response</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> enhance</span><span style="color:#E1E4E8;">(socket, </span><span style="color:#9ECBFF;">&#39;data-response&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">    try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">      const</span><span style="color:#79B8FF;"> result</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> processData</span><span style="color:#E1E4E8;">(data);</span></span>
<span class="line"><span style="color:#E1E4E8;">      response.</span><span style="color:#B392F0;">ok</span><span style="color:#E1E4E8;">(result, </span><span style="color:#9ECBFF;">&#39;Data processed successfully&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (error) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      response.</span><span style="color:#B392F0;">error</span><span style="color:#E1E4E8;">(error, </span><span style="color:#9ECBFF;">&#39;Processing failed&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h3 id="wrapper-pattern" tabindex="-1">Wrapper Pattern <a class="header-anchor" href="#wrapper-pattern" aria-label="Permalink to &quot;Wrapper Pattern&quot;">​</a></h3><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">io.</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;connection&#39;</span><span style="color:#E1E4E8;">, (</span><span style="color:#FFAB70;">socket</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  socket.</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#9ECBFF;">    &#39;async-operation&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#B392F0;">    wrapper</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">socket</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">response</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">data</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">      // Automatic error handling - no try/catch needed</span></span>
<span class="line"><span style="color:#F97583;">      const</span><span style="color:#79B8FF;"> result</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> await</span><span style="color:#B392F0;"> performAsyncOperation</span><span style="color:#E1E4E8;">(data);</span></span>
<span class="line"><span style="color:#E1E4E8;">      response.</span><span style="color:#B392F0;">ok</span><span style="color:#E1E4E8;">(result, </span><span style="color:#9ECBFF;">&#39;Operation completed&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }),</span></span>
<span class="line"><span style="color:#E1E4E8;">  );</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><h3 id="room-management" tabindex="-1">Room Management <a class="header-anchor" href="#room-management" aria-label="Permalink to &quot;Room Management&quot;">​</a></h3><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">io.</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;connection&#39;</span><span style="color:#E1E4E8;">, (</span><span style="color:#FFAB70;">socket</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  socket.</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#9ECBFF;">    &#39;join-room&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#B392F0;">    wrapper</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">socket</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">response</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">data</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">      const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">roomId</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> data;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">      await</span><span style="color:#E1E4E8;"> socket.</span><span style="color:#B392F0;">join</span><span style="color:#E1E4E8;">(roomId);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">      // Notify the user</span></span>
<span class="line"><span style="color:#E1E4E8;">      response.</span><span style="color:#B392F0;">ok</span><span style="color:#E1E4E8;">({ roomId }, </span><span style="color:#9ECBFF;">&#39;Joined room successfully&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">      // Notify others in the room</span></span>
<span class="line"><span style="color:#E1E4E8;">      response.</span><span style="color:#B392F0;">toRoom</span><span style="color:#E1E4E8;">(roomId).</span><span style="color:#B392F0;">emit</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;user-joined&#39;</span><span style="color:#E1E4E8;">, {</span></span>
<span class="line"><span style="color:#E1E4E8;">        userId: socket.userId,</span></span>
<span class="line"><span style="color:#E1E4E8;">        roomId,</span></span>
<span class="line"><span style="color:#E1E4E8;">      });</span></span>
<span class="line"><span style="color:#E1E4E8;">    }),</span></span>
<span class="line"><span style="color:#E1E4E8;">  );</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div><h2 id="authentication-integration" tabindex="-1">Authentication Integration <a class="header-anchor" href="#authentication-integration" aria-label="Permalink to &quot;Authentication Integration&quot;">​</a></h2><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// Authentication middleware</span></span>
<span class="line"><span style="color:#E1E4E8;">io.</span><span style="color:#B392F0;">use</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">socket</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">next</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">  const</span><span style="color:#79B8FF;"> token</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> socket.handshake.auth.token;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">  if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">token) {</span></span>
<span class="line"><span style="color:#F97583;">    return</span><span style="color:#B392F0;"> next</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> Error</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Authentication token required&#39;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">  try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">    const</span><span style="color:#79B8FF;"> user</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> jwt.</span><span style="color:#B392F0;">verify</span><span style="color:#E1E4E8;">(token, </span><span style="color:#79B8FF;">SECRET</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    socket.userId </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> user.id;</span></span>
<span class="line"><span style="color:#E1E4E8;">    socket.userRole </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> user.role;</span></span>
<span class="line"><span style="color:#B392F0;">    next</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (error) {</span></span>
<span class="line"><span style="color:#B392F0;">    next</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> Error</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Invalid authentication token&#39;</span><span style="color:#E1E4E8;">));</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// Using authentication in handlers</span></span>
<span class="line"><span style="color:#E1E4E8;">socket.</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#9ECBFF;">  &#39;get-profile&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#B392F0;">  wrapper</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">socket</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">response</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">data</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">    const</span><span style="color:#79B8FF;"> user</span><span style="color:#F97583;"> =</span><span style="color:#F97583;"> await</span><span style="color:#B392F0;"> getUserById</span><span style="color:#E1E4E8;">(socket.userId);</span></span>
<span class="line"><span style="color:#E1E4E8;">    response.</span><span style="color:#B392F0;">ok</span><span style="color:#E1E4E8;">(user, </span><span style="color:#9ECBFF;">&#39;Profile retrieved&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }),</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><h2 id="error-handling" tabindex="-1">Error Handling <a class="header-anchor" href="#error-handling" aria-label="Permalink to &quot;Error Handling&quot;">​</a></h2><h3 id="automatic-error-handling-with-wrapper" tabindex="-1">Automatic Error Handling with Wrapper <a class="header-anchor" href="#automatic-error-handling-with-wrapper" aria-label="Permalink to &quot;Automatic Error Handling with Wrapper&quot;">​</a></h3><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">socket.</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#9ECBFF;">  &#39;risky-operation&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#B392F0;">  wrapper</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">socket</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">response</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">data</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">    // Any thrown error is automatically caught and sent as error response</span></span>
<span class="line"><span style="color:#F97583;">    throw</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> Error</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Something went wrong&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#6A737D;">    // Automatically becomes: response.error(error, &#39;Operation failed&#39;)</span></span>
<span class="line"><span style="color:#E1E4E8;">  }),</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h3 id="manual-error-handling" tabindex="-1">Manual Error Handling <a class="header-anchor" href="#manual-error-handling" aria-label="Permalink to &quot;Manual Error Handling&quot;">​</a></h3><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">socket.</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;manual-handling&#39;</span><span style="color:#E1E4E8;">, (</span><span style="color:#FFAB70;">data</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">  const</span><span style="color:#79B8FF;"> response</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> enhance</span><span style="color:#E1E4E8;">(socket, </span><span style="color:#9ECBFF;">&#39;operation-result&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">  try</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">    const</span><span style="color:#79B8FF;"> result</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> riskyOperation</span><span style="color:#E1E4E8;">(data);</span></span>
<span class="line"><span style="color:#E1E4E8;">    response.</span><span style="color:#B392F0;">ok</span><span style="color:#E1E4E8;">(result, </span><span style="color:#9ECBFF;">&#39;Success&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  } </span><span style="color:#F97583;">catch</span><span style="color:#E1E4E8;"> (error) {</span></span>
<span class="line"><span style="color:#F97583;">    if</span><span style="color:#E1E4E8;"> (error.name </span><span style="color:#F97583;">===</span><span style="color:#9ECBFF;"> &#39;ValidationError&#39;</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">      response.</span><span style="color:#B392F0;">badRequest</span><span style="color:#E1E4E8;">(error, </span><span style="color:#9ECBFF;">&#39;Validation failed&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    } </span><span style="color:#F97583;">else</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      response.</span><span style="color:#B392F0;">error</span><span style="color:#E1E4E8;">(error, </span><span style="color:#9ECBFF;">&#39;Operation failed&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"><span style="color:#E1E4E8;">  }</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div><h2 id="real-time-features" tabindex="-1">Real-time Features <a class="header-anchor" href="#real-time-features" aria-label="Permalink to &quot;Real-time Features&quot;">​</a></h2><h3 id="broadcasting-to-rooms" tabindex="-1">Broadcasting to Rooms <a class="header-anchor" href="#broadcasting-to-rooms" aria-label="Permalink to &quot;Broadcasting to Rooms&quot;">​</a></h3><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">socket.</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#9ECBFF;">  &#39;send-message&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#B392F0;">  wrapper</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">socket</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">response</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">data</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">    const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">roomId</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">message</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> data;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">    const</span><span style="color:#79B8FF;"> messageObj</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      id: </span><span style="color:#B392F0;">generateId</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">      text: message,</span></span>
<span class="line"><span style="color:#E1E4E8;">      userId: socket.userId,</span></span>
<span class="line"><span style="color:#E1E4E8;">      timestamp: </span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> Date</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">toISOString</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">    };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    // Save to database</span></span>
<span class="line"><span style="color:#F97583;">    await</span><span style="color:#B392F0;"> saveMessage</span><span style="color:#E1E4E8;">(messageObj);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    // Broadcast to room</span></span>
<span class="line"><span style="color:#E1E4E8;">    response.</span><span style="color:#B392F0;">toRoom</span><span style="color:#E1E4E8;">(roomId).</span><span style="color:#B392F0;">emit</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;new-message&#39;</span><span style="color:#E1E4E8;">, messageObj);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    // Confirm to sender</span></span>
<span class="line"><span style="color:#E1E4E8;">    response.</span><span style="color:#B392F0;">ok</span><span style="color:#E1E4E8;">({ messageId: messageObj.id }, </span><span style="color:#9ECBFF;">&#39;Message sent&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }),</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div><h3 id="private-messaging" tabindex="-1">Private Messaging <a class="header-anchor" href="#private-messaging" aria-label="Permalink to &quot;Private Messaging&quot;">​</a></h3><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#E1E4E8;">socket.</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#9ECBFF;">  &#39;send-private-message&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#B392F0;">  wrapper</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">socket</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">response</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">data</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">    const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">targetUserId</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">message</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> data;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">    const</span><span style="color:#79B8FF;"> targetSocket</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> findSocketByUserId</span><span style="color:#E1E4E8;">(targetUserId);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">    if</span><span style="color:#E1E4E8;"> (</span><span style="color:#F97583;">!</span><span style="color:#E1E4E8;">targetSocket) {</span></span>
<span class="line"><span style="color:#F97583;">      return</span><span style="color:#E1E4E8;"> response.</span><span style="color:#B392F0;">notFound</span><span style="color:#E1E4E8;">({ userId: targetUserId }, </span><span style="color:#9ECBFF;">&#39;User not online&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">    const</span><span style="color:#79B8FF;"> messageObj</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      from: socket.userId,</span></span>
<span class="line"><span style="color:#E1E4E8;">      message,</span></span>
<span class="line"><span style="color:#E1E4E8;">      timestamp: </span><span style="color:#F97583;">new</span><span style="color:#B392F0;"> Date</span><span style="color:#E1E4E8;">().</span><span style="color:#B392F0;">toISOString</span><span style="color:#E1E4E8;">(),</span></span>
<span class="line"><span style="color:#E1E4E8;">    };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    // Send to target user</span></span>
<span class="line"><span style="color:#E1E4E8;">    response.</span><span style="color:#B392F0;">toSocket</span><span style="color:#E1E4E8;">(targetSocket.id).</span><span style="color:#B392F0;">emit</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;private-message&#39;</span><span style="color:#E1E4E8;">, messageObj);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">    // Confirm to sender</span></span>
<span class="line"><span style="color:#E1E4E8;">    response.</span><span style="color:#B392F0;">ok</span><span style="color:#E1E4E8;">({ delivered: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;"> }, </span><span style="color:#9ECBFF;">&#39;Message delivered&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">  }),</span></span>
<span class="line"><span style="color:#E1E4E8;">);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><h2 id="middleware-integration" tabindex="-1">Middleware Integration <a class="header-anchor" href="#middleware-integration" aria-label="Permalink to &quot;Middleware Integration&quot;">​</a></h2><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#6A737D;">// Custom socket middleware for response enhancement</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#B392F0;"> responseMiddleware</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">socket</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">next</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">  // Add custom methods to socket</span></span>
<span class="line"><span style="color:#E1E4E8;">  socket.</span><span style="color:#B392F0;">sendSuccess</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">data</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">message</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">    const</span><span style="color:#79B8FF;"> response</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> enhance</span><span style="color:#E1E4E8;">(socket, event);</span></span>
<span class="line"><span style="color:#E1E4E8;">    response.</span><span style="color:#B392F0;">ok</span><span style="color:#E1E4E8;">(data, message);</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">  socket.</span><span style="color:#B392F0;">sendError</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">event</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">error</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">message</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">    const</span><span style="color:#79B8FF;"> response</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> enhance</span><span style="color:#E1E4E8;">(socket, event);</span></span>
<span class="line"><span style="color:#E1E4E8;">    response.</span><span style="color:#B392F0;">error</span><span style="color:#E1E4E8;">(error, message);</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">  next</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">io.</span><span style="color:#B392F0;">use</span><span style="color:#E1E4E8;">(responseMiddleware);</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><h2 id="testing-socket-io" tabindex="-1">Testing Socket.IO <a class="header-anchor" href="#testing-socket-io" aria-label="Permalink to &quot;Testing Socket.IO&quot;">​</a></h2><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { Server } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;socket.io&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> Client </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;socket.io-client&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { quickSocketSetup } </span><span style="color:#F97583;">from</span><span style="color:#9ECBFF;"> &#39;@amitkandar/response-handler&#39;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">describe</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;Socket.IO Tests&#39;</span><span style="color:#E1E4E8;">, () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">  let</span><span style="color:#E1E4E8;"> io, clientSocket, serverSocket;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">  beforeEach</span><span style="color:#E1E4E8;">((</span><span style="color:#FFAB70;">done</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">    const</span><span style="color:#79B8FF;"> httpServer</span><span style="color:#F97583;"> =</span><span style="color:#B392F0;"> createServer</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    io </span><span style="color:#F97583;">=</span><span style="color:#F97583;"> new</span><span style="color:#B392F0;"> Server</span><span style="color:#E1E4E8;">(httpServer);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">    const</span><span style="color:#E1E4E8;"> { </span><span style="color:#79B8FF;">enhance</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">wrapper</span><span style="color:#E1E4E8;"> } </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> quickSocketSetup</span><span style="color:#E1E4E8;">({ mode: </span><span style="color:#9ECBFF;">&#39;test&#39;</span><span style="color:#E1E4E8;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    io.</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;connection&#39;</span><span style="color:#E1E4E8;">, (</span><span style="color:#FFAB70;">socket</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">      serverSocket </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> socket;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">      socket.</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span></span>
<span class="line"><span style="color:#9ECBFF;">        &#39;test-event&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#B392F0;">        wrapper</span><span style="color:#E1E4E8;">(</span><span style="color:#F97583;">async</span><span style="color:#E1E4E8;"> (</span><span style="color:#FFAB70;">socket</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">response</span><span style="color:#E1E4E8;">, </span><span style="color:#FFAB70;">data</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">          response.</span><span style="color:#B392F0;">ok</span><span style="color:#E1E4E8;">(data, </span><span style="color:#9ECBFF;">&#39;Test successful&#39;</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">        }),</span></span>
<span class="line"><span style="color:#E1E4E8;">      );</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    httpServer.</span><span style="color:#B392F0;">listen</span><span style="color:#E1E4E8;">(() </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#F97583;">      const</span><span style="color:#79B8FF;"> port</span><span style="color:#F97583;"> =</span><span style="color:#E1E4E8;"> httpServer.</span><span style="color:#B392F0;">address</span><span style="color:#E1E4E8;">().port;</span></span>
<span class="line"><span style="color:#E1E4E8;">      clientSocket </span><span style="color:#F97583;">=</span><span style="color:#B392F0;"> Client</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">\`http://localhost:\${</span><span style="color:#E1E4E8;">port</span><span style="color:#9ECBFF;">}\`</span><span style="color:#E1E4E8;">);</span></span>
<span class="line"><span style="color:#E1E4E8;">      clientSocket.</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;connect&#39;</span><span style="color:#E1E4E8;">, done);</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">  it</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;should handle test event&#39;</span><span style="color:#E1E4E8;">, (</span><span style="color:#FFAB70;">done</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">    clientSocket.</span><span style="color:#B392F0;">emit</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;test-event&#39;</span><span style="color:#E1E4E8;">, { test: </span><span style="color:#9ECBFF;">&#39;data&#39;</span><span style="color:#E1E4E8;"> });</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">    clientSocket.</span><span style="color:#B392F0;">on</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;test-response&#39;</span><span style="color:#E1E4E8;">, (</span><span style="color:#FFAB70;">data</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#B392F0;">      expect</span><span style="color:#E1E4E8;">(data).</span><span style="color:#B392F0;">toMatchObject</span><span style="color:#E1E4E8;">({</span></span>
<span class="line"><span style="color:#E1E4E8;">        success: </span><span style="color:#79B8FF;">true</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">        data: { test: </span><span style="color:#9ECBFF;">&#39;data&#39;</span><span style="color:#E1E4E8;"> },</span></span>
<span class="line"><span style="color:#E1E4E8;">        message: </span><span style="color:#9ECBFF;">&#39;Test successful&#39;</span><span style="color:#E1E4E8;">,</span></span>
<span class="line"><span style="color:#E1E4E8;">      });</span></span>
<span class="line"><span style="color:#B392F0;">      done</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#E1E4E8;">    });</span></span>
<span class="line"><span style="color:#E1E4E8;">  });</span></span>
<span class="line"><span style="color:#E1E4E8;">});</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br></div></div><h2 id="response-format" tabindex="-1">Response Format <a class="header-anchor" href="#response-format" aria-label="Permalink to &quot;Response Format&quot;">​</a></h2><p>All Socket.IO responses follow this consistent format:</p><div class="language-typescript line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code" tabindex="0"><code><span class="line"><span style="color:#F97583;">interface</span><span style="color:#B392F0;"> SocketResponse</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#FFAB70;">  success</span><span style="color:#F97583;">:</span><span style="color:#79B8FF;"> boolean</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#FFAB70;">  data</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;"> any</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// For successful responses</span></span>
<span class="line"><span style="color:#FFAB70;">  message</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;"> string</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// Human-readable message</span></span>
<span class="line"><span style="color:#FFAB70;">  error</span><span style="color:#F97583;">?:</span><span style="color:#B392F0;"> ErrorInfo</span><span style="color:#E1E4E8;">; </span><span style="color:#6A737D;">// For error responses</span></span>
<span class="line"><span style="color:#FFAB70;">  meta</span><span style="color:#F97583;">?:</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#6A737D;">    // Metadata</span></span>
<span class="line"><span style="color:#FFAB70;">    timestamp</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;"> string</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#FFAB70;">    socketId</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;"> string</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#FFAB70;">    environment</span><span style="color:#F97583;">?:</span><span style="color:#79B8FF;"> string</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#E1E4E8;">  };</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="best-practices" tabindex="-1">Best Practices <a class="header-anchor" href="#best-practices" aria-label="Permalink to &quot;Best Practices&quot;">​</a></h2><ol><li><strong>Use wrapper for async operations</strong> - Automatic error handling</li><li><strong>Always validate input data</strong> - Check required fields</li><li><strong>Use room targeting for broadcasts</strong> - Efficient communication</li><li><strong>Handle authentication properly</strong> - Verify tokens and permissions</li><li><strong>Test socket events thoroughly</strong> - Include error cases</li><li><strong>Use consistent event naming</strong> - Follow patterns like <code>get-user</code> -&gt; <code>user-data</code></li></ol>`,67)]))}const d=n(l,[["render",o]]);export{b as __pageData,d as default};
